# -*- coding: utf-8 -*-
import configparser
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import json
import re
import os
import io
from collections import Counter


config = configparser.ConfigParser()
config.read('setting.ini')

state_storage = StateMemoryStorage()
token_bot = config['Token']['tg_token']
group_id = config['Token']['group']

bot = TeleBot(token_bot)

buttons = []
ESTIMATION = [str(i) for i in range(11)]


def loading_json():
    file_name = 'data.json'
    if os.path.isfile(file_name):
        with io.open(file_name, "r", encoding="utf-8", errors="ignore") as f:
            user_information_json = json.load(f)
            return user_information_json
    else:
        print(f'–§–∞–π–ª–∞ {file_name} –Ω–µ—Ç—É. –ó–Ω–∞—á–∏—Ç –±—É–¥–µ—Ç –≤—Å–µ —Å –Ω—É–ª—è')
        return {}

user_information_json = loading_json()


def count_number():
    count = len(user_information_json)
    return count + 1


def save_json():
    with open('data.json', 'w', encoding='utf-8') as file:
        json.dump(user_information_json, file,
                  ensure_ascii=False, indent=4)


def format_phone_number(phone):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    phone_re = re.sub(r'\D', '', phone)
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if phone_re.startswith('8'):
        phone_re = '7' + phone_re[1:]
    # –î–æ–±–∞–≤–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not phone_re.startswith('+'):
        phone_re = '+7' + phone_re[1:] if phone_re.startswith('7')\
            else '+7' + phone_re
    return phone_re


@bot.message_handler(commands=['start'])
def start(message):
    name = str()
    cid = message.chat.id
    if len(message.text) > 6:
        order_number = message.text.split('_')[1]
    else:
        return bot.send_message(message.chat.id, f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ qr-–∫–æ–¥.'
                                f' –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º qr-–∫–æ–¥')

    if 'kazn' in order_number:
        number = re.search(r'\d+', order_number)
        order_number = '–ö–ê–ó–ù' + str(number.group())
    elif 'vtzn' in order_number:
        number = re.search(r'\d+', order_number)
        order_number = '–í–¢–ó–ù' + str(number.group())

    if message.from_user.last_name is not None:
        name = message.from_user.last_name
    if message.from_user.first_name is not None:
        if name == '':
            name = message.from_user.first_name
        else:
            name = name + f' {message.from_user.first_name}'
    if order_number in user_information_json:
        bot.send_message(message.chat.id, f'–ó–∞–∫–∞–∑ {order_number}.\n'
                                          f'–£–∂–µ –æ—Ü–µ–Ω–µ–Ω.')
        return
    else:
        user_information_json[order_number] = {
            'Name': name,
            'Cid': cid,
            'Phone' : str(),
            'Estimation' : -1,
            'Feedback' : str(),
            'Question_date' : datetime.now().strftime('%d.%m.%Y %H:%M'),
            'Number' : count_number()
        }
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    reg_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                      request_contact=True)
    keyboard.add(reg_button)
    bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}. '
                                      f'–ù–∞–º –≤–∞–∂–µ–Ω –≤–∞—à –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–∫–∞–∑—É '
                                      f'{order_number}. '
                                      f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                      f'"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞".',
                     reply_markup=keyboard)


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    contact = format_phone_number(message.contact.phone_number)
    cid = message.chat.id
    order_number = str()
    bot.send_message(cid, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º.",
                     reply_markup=types.ReplyKeyboardRemove())
    for key_dict, value_dict in user_information_json.items():
        if value_dict['Cid'] == cid and value_dict['Phone'] == '':
            order_number = key_dict
            break

    user_information_json[order_number]['Phone'] = contact
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ InlineKeyboardMarkup
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    buttons = []
    for i in range(10, -1, -1):
        button = types.InlineKeyboardButton(text=str(i), callback_data=str(i))
        buttons.append(button)
    keyboard.add(*buttons)
    bot.send_message(cid, f'–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –æ—Ç 0 –¥–æ 10.',
                    reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ESTIMATION)
def callback_inline(call):
    cid = call.message.chat.id
    estimation = int(call.data)
    order_number = str()
    bot.send_message(cid, f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ {estimation}/10 –ø—Ä–∏–Ω—è—Ç–∞.",
                     reply_markup=types.ReplyKeyboardRemove())
    for key_dict, value_dict in user_information_json.items():
        if value_dict['Cid'] == cid and value_dict['Estimation'] == -1:
            order_number = key_dict
            break
    user_information_json[order_number]['Estimation'] = estimation
    bot.send_message(cid, f'–ü—Ä–æ—Å–∏–º –≤–∞—Å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.')


@bot.message_handler(func=lambda message: True and '/' not in message.text)
def feedback_add(message):
    cid = message.chat.id
    feedback = message.text
    if feedback == '':
        feedback = ' '
    order_number = str()
    for key_dict, value_dict in user_information_json.items():
        if value_dict['Cid'] == cid and value_dict['Feedback'] == '':
            order_number = key_dict
            break
    user_information_json[order_number]['Feedback'] = feedback
    bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É.')
    save_json()
    name = user_information_json[order_number]['Name']
    phone = user_information_json[order_number]['Phone']
    estimation = user_information_json[order_number]['Estimation']
    feedback = user_information_json[order_number]['Feedback']
    number = user_information_json[order_number]['Number']
    text = f'''üìä –û–ü–†–û–° #{number}
    ------------------------------
    –ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥: {order_number}
    –ö–ª–∏–µ–Ω—Ç: {name}
    –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
    –û—Ü–µ–Ω–∫–∞: {estimation}/10
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback}'''
    bot.send_message(group_id, text)


@bot.message_handler(commands=['table'])
def table_(message):
    cid = message.chat.id
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ InlineKeyboardMarkup
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    TEXT_ = {'–ó–∞ –º–µ—Å—è—Ü': 'month', '–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª': 'quarter', '–ó–∞ –≥–æ–¥': 'year'}
    for key, value in TEXT_.items():
        button = types.InlineKeyboardButton(text=key, callback_data=value)
        buttons.append(button)
    keyboard.add(*buttons)
    bot.send_message(cid, f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in
                            ['month', 'quarter', 'year'])
def callback_table(call):
    cid = call.message.chat.id
    TEXT_dict = {'month': '–∑–∞ –º–µ—Å—è—Ü','quarter': '–∑–∞ –∫–≤–∞—Ä—Ç–∞–ª', 'year': '–∑–∞ –≥–æ–¥'}
    TEXT_ = call.data
    date = datetime.now()
    date_back = str()
    if TEXT_ == 'month':
        date_back = date - relativedelta(months=1)
    elif TEXT_ == 'quarter':
        date_back = date - relativedelta(months=3)
    elif TEXT_ == 'year':
        date_back = date - relativedelta(years=1)
    recent_feedbacks = [
        f for f in user_information_json.values()
        if datetime.strptime(f['Question_date'], '%d.%m.%Y %H:%M') >= date_back
    ]
    total_feedbacks = len(recent_feedbacks)
    feedback_by_estimation = Counter(f['Estimation'] for f in recent_feedbacks)
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ {TEXT_dict[TEXT_]}:\n"
    report += f"üîπ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_feedbacks}\n"
    report += "üîπ –û—Ü–µ–Ω–∫–∏:\n"
    for estimation in range(10, -1, -1):
        count = feedback_by_estimation.get(estimation, 0)
        if count > 0:
            report += f"  ‚Ä¢ –û—Ü–µ–Ω–∫–∞ {estimation}: {count} –æ—Ç–∑—ã–≤–æ–≤\n"

    bot.send_message(group_id, report)


@bot.message_handler(commands=['save'])
def save(message):
    cid = message.chat.id
    save_json()
    bot.send_message(cid, f'–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞')


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
